{"version":3,"file":"static/js/818.f8ed66a0.chunk.js","mappings":"0NAEaA,EAAUC,EAAAA,GAAAA,QAAcC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wLASxBC,EAAUH,EAAAA,GAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,6H,sECTpBG,EAAOL,EAAAA,GAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+EAKlBI,EAAoBN,EAAAA,GAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,uDAK9BK,EAAQP,EAAAA,GAAAA,MAAYQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,gIAQpBO,EAAST,EAAAA,GAAAA,OAAaU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,ye,SCZtBS,EAAwB,WACnC,IAAAC,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA4BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAClBG,GAAWC,EAAAA,EAAAA,MACTC,GAASC,EAAAA,EAAAA,KAATD,KACJE,GAAgBC,EAAAA,EAAAA,MAChBC,GAAkBD,EAAAA,EAAAA,MAChBE,EAAuB,OAAJL,QAAI,IAAJA,OAAI,EAAJA,EAAMM,QAC7B,SAACC,GAAY,OACXA,EAAQf,MAAQe,EAAQf,KAAKgB,cAAcC,SAASjB,EAAKgB,cAAc,IAGrEE,EAAW,SAACC,GAChB,IAAAC,EAAwBD,EAAEE,cAAlBrB,EAAIoB,EAAJpB,KAAMsB,EAAKF,EAALE,MACd,OAAQtB,GACN,IAAK,OACHC,EAAQqB,GACR,MACF,IAAK,SACHjB,EAAUiB,GAIhB,EAeA,OACEC,EAAAA,EAAAA,MAAClC,EAAI,CAACmC,SAdS,SAACL,GAEhB,GADAA,EAAEM,iBACEZ,EAAiBa,OAAS,EAC5B,OAAOC,EAAAA,GAAAA,KACL,qFAGJrB,EAASsB,EAAAA,EAAAA,iBAAoC,CAAE5B,KAAAA,EAAMI,OAAAA,KACrDuB,EAAAA,GAAAA,QAAc,yBAADE,OAAgB7B,EAAI,2BACjCC,EAAQ,IACRI,EAAU,GACZ,EAG2ByB,SAAA,EACvBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gBACJP,EAAAA,EAAAA,MAACjC,EAAiB,CAAAwC,SAAA,EAChBC,EAAAA,EAAAA,KAAA,SAAOC,QAAStB,EAAcoB,SAAC,UAC/BC,EAAAA,EAAAA,KAACxC,EAAK,CACJ2B,SAAUA,EACVI,MAAOtB,EACPiC,KAAK,OACLjC,KAAK,OACLkC,GAAIxB,EACJyB,YAAY,YACZC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZf,EAAAA,EAAAA,MAACjC,EAAiB,CAAAwC,SAAA,EAChBC,EAAAA,EAAAA,KAAA,SAAOC,QAASpB,EAAgBkB,SAAC,YACjCC,EAAAA,EAAAA,KAACxC,EAAK,CACJ2B,SAAUA,EACVI,MAAOlB,EACP6B,KAAK,MACLjC,KAAK,SACLkC,GAAItB,EACJuB,YAAY,gBACZC,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZP,EAAAA,EAAAA,KAACtC,EAAM,CAACwC,KAAK,SAAQH,SAAC,kBAG5B,E,UC9EaS,EAAuBvD,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,2KAUjCsD,EAAqBxD,EAAAA,GAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,gICHjCuD,EAA0B,WACrC,IAAMnC,GAAWC,EAAAA,EAAAA,MACXmC,GAAkB/B,EAAAA,EAAAA,MAChBG,GAAWL,EAAAA,EAAAA,KAAXK,OAER,OACEiB,EAAAA,EAAAA,KAAAY,EAAAA,SAAA,CAAAb,UACEP,EAAAA,EAAAA,MAACgB,EAAoB,CAAAT,SAAA,EACnBC,EAAAA,EAAAA,KAAA,SAAOC,QAASU,EAAgBZ,SAAC,2BACjCC,EAAAA,EAAAA,KAACS,EAAkB,CACjBtB,SAAU,SAAAC,GAAC,OACTb,GAASsC,EAAAA,EAAAA,GAAUzB,EAAE0B,OAAOvB,MAAMN,cAAc8B,QAAQ,EAE1DxB,MAAOR,EACPmB,KAAK,OACLC,GAAIQ,EACJP,YAAY,uBAKtB,ECdaY,GAdqB/D,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mJAQxBF,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,4GAMTF,EAAAA,GAAAA,GAASQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,6HAOhB8D,EAAOhE,EAAAA,GAAAA,KAAWU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,8BAGlB+D,EAAYjE,EAAAA,GAAAA,OAAakE,IAAAA,GAAAhE,EAAAA,EAAAA,GAAA,yjBAwBzBiE,EAAgBnE,EAAAA,GAAAA,KAAWoE,IAAAA,GAAAlE,EAAAA,EAAAA,GAAA,sFAK3BmE,EAAiBrE,EAAAA,GAAAA,KAAWsE,IAAAA,GAAApE,EAAAA,EAAAA,GAAA,6BCdzC,EA5BiD,SAAHqE,GAA8B,IAAxBvD,EAAIuD,EAAJvD,KAAMI,EAAMmD,EAANnD,OAAQ8B,EAAEqB,EAAFrB,GAChEsB,QAAQC,WAAWzD,GACnB,IAAQ0D,GAAiBjD,EAAAA,EAAAA,KAAjBiD,aACFpD,GAAWC,EAAAA,EAAAA,MAEjB,OACEwB,EAAAA,EAAAA,KAAAY,EAAAA,SAAA,CAAAb,UACEP,EAAAA,EAAAA,MAACwB,EAAI,CAAAjB,SAAA,EACHC,EAAAA,EAAAA,KAACsB,EAAc,CAACnB,GAAIA,EAAGJ,UACrBC,EAAAA,EAAAA,KAACiB,EAAI,CAAAlB,SAAE9B,OAET+B,EAAAA,EAAAA,KAACsB,EAAc,CAAAvB,UACbC,EAAAA,EAAAA,KAACiB,EAAI,CAAAlB,SAAE1B,OAET2B,EAAAA,EAAAA,KAACsB,EAAc,CAAAvB,UACbC,EAAAA,EAAAA,KAACkB,EAAS,CACRU,QAAS,kBAAMrD,EAASsB,EAAAA,EAAAA,cAAiCM,GAAI,EAC7D0B,SAAUF,EAAa5B,UAEvBC,EAAAA,EAAAA,KAACoB,EAAa,CAAArB,UACZC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,qBAOpB,E,UCTA,EAfmB,WACjB,OACEC,EAAAA,EAAAA,KAAAY,EAAAA,SAAA,CAAAb,UACEC,EAAAA,EAAAA,KAAC8B,EAAAA,GAAS,CACRC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,iBACVC,aAAc,CAAC,EACfC,aAAa,iBACbC,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,cAI7D,EC5BaC,GAAqBrF,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mJAQ/BoF,GAAQtF,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,uFAKjBqF,GAAiBvF,EAAAA,GAAAA,KAAWQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,2CAI5BsF,GAAOxF,EAAAA,GAAAA,GAASU,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,4JCNhBuF,IDcOzF,EAAAA,GAAAA,GAASkE,IAAAA,GAAAhE,EAAAA,EAAAA,GAAA,qGAMTF,EAAAA,GAAAA,KAAWoE,IAAAA,GAAAlE,EAAAA,EAAAA,GAAA,8BAGNF,EAAAA,GAAAA,OAAasE,IAAAA,GAAApE,EAAAA,EAAAA,GAAA,yeCvBD,WACnC,IAAMoB,GAAWC,EAAAA,EAAAA,MACjBmE,GAAuCjE,EAAAA,EAAAA,KAA/BD,EAAIkE,EAAJlE,KAAMkD,EAAYgB,EAAZhB,aAAc5C,EAAM4D,EAAN5D,QAE5B6D,EAAAA,EAAAA,YAAU,WACRrE,EAASsB,EAAAA,EAAAA,iBACX,GAAG,CAACtB,IAEJ,IAAMO,EAAuB,OAAJL,QAAI,IAAJA,OAAI,EAAJA,EAAMM,QAC7B,SAACC,GAAY,OACXA,EAAQf,MAAQe,EAAQf,KAAKgB,cAAcC,SAASH,EAAOE,cAAc,IAG7E,OACEO,EAAAA,EAAAA,MAAC8C,GAAkB,CAAAvC,SAAA,EACjBP,EAAAA,EAAAA,MAAC+C,GAAK,CAAAxC,SAAA,EACJC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,mBACNC,EAAAA,EAAAA,KAACwC,GAAc,CAAAzC,SAAE4B,IAAgB3B,EAAAA,EAAAA,KAAC6C,EAAU,UAE9C7C,EAAAA,EAAAA,KAACyC,GAAI,CAAA1C,SACFjB,GACCA,EAAiBgE,KACf,SAAAtB,GAQO,IAPLrB,EAAEqB,EAAFrB,GACAlC,EAAIuD,EAAJvD,KACAI,EAAMmD,EAANnD,OAMA,OACE2B,EAAAA,EAAAA,KAAC+C,EAAW,CAAU5C,GAAIA,EAAIlC,KAAMA,EAAMI,OAAQA,GAAhC8B,EAEtB,QAKZ,GClCA,GAb4B,WAC1B,OACEH,EAAAA,EAAAA,KAAAY,EAAAA,SAAA,CAAAb,UACEC,EAAAA,EAAAA,KAAChD,EAAO,CAAA+C,UACNP,EAAAA,EAAAA,MAACpC,EAAO,CAAA2C,SAAA,EACNC,EAAAA,EAAAA,KAACpC,EAAW,KACZoC,EAAAA,EAAAA,KAACU,EAAa,KACdV,EAAAA,EAAAA,KAAC0C,GAAW,UAKtB,ECRA,GAPiB,WACf,OACE1C,EAAAA,EAAAA,KAAAY,EAAAA,SAAA,CAAAb,UACEC,EAAAA,EAAAA,KAACgD,GAAS,KAGhB,C,wDCPA,IAkBIpE,EAAS,WAAH,IAAIqE,EAAIC,UAAAvD,OAAA,QAAAwD,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAAE,OACrBE,OAAOC,gBAAgB,IAAIC,WAAWL,IAAOM,QAAO,SAACpD,EAAIqD,GAWvD,OARErD,IAFFqD,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,C","sources":["components/phonebook/PhoneBook.style.ts","components/phonebook/formContact/FormContact.styled.ts","components/phonebook/formContact/FormContact.tsx","components/phonebook/searchContact/SearchContact.style.ts","components/phonebook/searchContact/SearchContact.tsx","components/phonebook/itemContact/itemContact.styled.ts","components/phonebook/itemContact/itemContact.tsx","loader/Spinner.tsx","components/phonebook/listContact/ListContact.styled.ts","components/phonebook/listContact/ListContact.tsx","components/phonebook/PhoneBook.tsx","Pages/PhoneBookPage.tsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Section = styled.section`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: #1e1e1e;\n  margin: 30px 16px;\n  border: 1px solid transparent;\n  border-radius: 30px;\n`;\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 40px;\n`;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nexport const WrapperLabelInput = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Input = styled.input`\n  width: 300px;\n  height: 30px;\n  margin: 5px;\n  border-radius: 4px;\n  border: none;\n  background-color: white;\n`;\nexport const Button = styled.button`\n  text-decoration: none;\n  display: inline-block;\n  width: 220px;\n  height: 45px;\n  line-height: 45px;\n  border-radius: 45px;\n  margin: 20px 10px;\n  font-family: Montserrat, sans-serif;\n  font-size: 11px;\n  text-transform: uppercase;\n  text-align: center;\n  letter-spacing: 3px;\n  font-weight: 600;\n  color: rgb(82, 79, 78);\n  background: white;\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 8px 15px;\n  transition: all 0.3s ease 0s;\n  border: none;\n  cursor: pointer;\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport contactsOperations from 'redux/phoneBook/contactsOperations';\nimport { useContacts } from 'hooks';\nimport { nanoid } from 'nanoid';\nimport { toast } from 'react-toastify';\nimport { Input, Button, Form, WrapperLabelInput } from './FormContact.styled';\n\nexport const FormContact: React.FC = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const { item } = useContacts();\n  let contactNameId = nanoid();\n  let contactNumberId = nanoid();\n  const filteredContacts = item?.filter(\n    (contact: any) =>\n      contact.name && contact.name.toLowerCase().includes(name.toLowerCase())\n  );\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n    }\n  };\n\n  const onSubmit = (e: React.ChangeEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (filteredContacts.length > 0) {\n      return toast.warn(\n        '💩 There is already a contact with that name. Correct the entered name!'\n      );\n    }\n    dispatch(contactsOperations.createNewContact({ name, number }));\n    toast.success(`💪 Contact (${name}) added successfully !`);\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <h2>Phone Book</h2>\n      <WrapperLabelInput>\n        <label htmlFor={contactNameId}>Name</label>\n        <Input\n          onChange={onChange}\n          value={name}\n          type=\"text\"\n          name=\"name\"\n          id={contactNameId}\n          placeholder=\"Aleksandr\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </WrapperLabelInput>\n      <WrapperLabelInput>\n        <label htmlFor={contactNumberId}>Number</label>\n        <Input\n          onChange={onChange}\n          value={number}\n          type=\"tel\"\n          name=\"number\"\n          id={contactNumberId}\n          placeholder=\"+380956888227\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </WrapperLabelInput>\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};\n","import styled from 'styled-components';\n\nexport const WrapperSearchContact = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n  align-items: flex-start;\n  margin: 10px auto;\n  padding: 10px;\n  max-width: 320px;\n`;\n\nexport const InputSearchContact = styled.input`\n  width: 300px;\n  height: 30px;\n  margin: 5px;\n  border-radius: 4px;\n  border: none;\n  background-color: white;\n`;\n","import { useDispatch } from 'react-redux';\nimport { useContacts } from 'hooks';\nimport { nanoid } from 'nanoid';\nimport { setFilter } from 'redux/phoneBook/contactsSlice';\nimport {\n  InputSearchContact,\n  WrapperSearchContact,\n} from './SearchContact.style';\n\nexport const SearchContact: React.FC = () => {\n  const dispatch = useDispatch();\n  const idSerachContact = nanoid();\n  const { filter } = useContacts();\n\n  return (\n    <>\n      <WrapperSearchContact>\n        <label htmlFor={idSerachContact}>Find contacts by name</label>\n        <InputSearchContact\n          onChange={e =>\n            dispatch(setFilter(e.target.value.toLowerCase().trim()))\n          }\n          value={filter}\n          type=\"text\"\n          id={idSerachContact}\n          placeholder=\"Search contact\"\n        />\n      </WrapperSearchContact>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ListContactWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 10px auto;\n  padding: 10px;\n`;\nexport const List = styled.ul`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  list-style: none;\n`;\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  min-width: 100px;\n  align-items: center;\n  width: 100%;\n`;\nexport const Span = styled.span`\n  font-size: 20px;\n`;\nexport const ButtonDel = styled.button`\n  text-decoration: none;\n  display: inline-block;\n  width: 100px;\n  height: 45px;\n  line-height: 45px;\n  border-radius: 45px;\n  margin: 10px 20px;\n  font-family: Montserrat, sans-serif;\n  font-size: 11px;\n  text-transform: uppercase;\n  text-align: center;\n  letter-spacing: 3px;\n  font-weight: 600;\n  color: rgb(82, 79, 78);\n  background: rgb(100%, 100%, 100%, 1);\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 8px 15px;\n  transition: all 0.3s ease 0s;\n  border: none;\n  cursor: pointer;\n  &:disabled {\n    background: rgb(58%, 58%, 58%, 1);\n  }\n`;\nexport const ButtonWrapper = styled.span`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n`;\nexport const ContactContent = styled.span`\n  margin: 0 10px;\n`;\n","import PropTypes from 'prop-types';\nimport { useContacts } from 'hooks';\nimport contactsOperations from 'redux/phoneBook/contactsOperations';\nimport { useDispatch } from 'react-redux';\nimport { PropsItemContacts } from 'components/Interface/Interface';\nimport {\n  Item,\n  Span,\n  ButtonDel,\n  ButtonWrapper,\n  ContactContent,\n} from './itemContact.styled';\n\nconst ItemContact: React.FC<PropsItemContacts> = ({ name, number, id }) => {\n  console.log(typeof name);\n  const { isRefreshing } = useContacts();\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Item>\n        <ContactContent id={id}>\n          <Span>{name}</Span>\n        </ContactContent>\n        <ContactContent>\n          <Span>{number}</Span>\n        </ContactContent>\n        <ContactContent>\n          <ButtonDel\n            onClick={() => dispatch(contactsOperations.deleteContact(id))}\n            disabled={isRefreshing}\n          >\n            <ButtonWrapper>\n              <span>Delete</span>\n            </ButtonWrapper>\n          </ButtonDel>\n        </ContactContent>\n      </Item>\n    </>\n  );\n};\nexport default ItemContact;\nItemContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","import { ColorRing } from 'react-loader-spinner';\n// const SpinnerSmall = () => {\n//   return (\n//     <>\n//       <ColorRing\n//         visible={true}\n//         height=\"12\"\n//         width=\"12\"\n//         ariaLabel=\"blocks-loading\"\n//         wrapperStyle={{}}\n//         wrapperClass=\"blocks-wrapper\"\n//         colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n//       />\n//     </>\n//   );\n// };\nconst SpinnerBig = () => {\n  return (\n    <>\n      <ColorRing\n        visible={true}\n        height=\"30\"\n        width=\"30\"\n        ariaLabel=\"blocks-loading\"\n        wrapperStyle={{}}\n        wrapperClass=\"blocks-wrapper\"\n        colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n      />\n    </>\n  );\n};\nexport default SpinnerBig;\n","import styled from 'styled-components';\n\nexport const ListContactWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 10px auto;\n  padding: 10px;\n`;\nexport const Title = styled.h2`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\nexport const SpinnerWrapper = styled.span`\n  width: 32px;\n  height: 32px;\n`;\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  list-style: none;\n  min-width: 450px;\n`;\nexport const Item = styled.li`\n  display: flex;\n  justify-content: center;\n  min-width: 100px;\n  align-items: center;\n`;\nexport const Span = styled.span`\n  font-size: 20px;\n`;\nexport const ButtonDel = styled.button`\n  text-decoration: none;\n  display: inline-block;\n  width: 100px;\n  height: 45px;\n  line-height: 45px;\n  border-radius: 45px;\n  margin: 10px 20px;\n  font-family: Montserrat, sans-serif;\n  font-size: 11px;\n  text-transform: uppercase;\n  text-align: center;\n  letter-spacing: 3px;\n  font-weight: 600;\n  color: rgb(82, 79, 78);\n  background: white;\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 8px 15px;\n  transition: all 0.3s ease 0s;\n  border: none;\n  cursor: pointer;\n`;\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport contactsOperations from 'redux/phoneBook/contactsOperations';\nimport ItemContact from 'components/phonebook/itemContact/itemContact';\nimport SpinnerBig from 'loader/Spinner';\nimport { useContacts } from 'hooks';\nimport {\n  ListContactWrapper,\n  List,\n  Title,\n  SpinnerWrapper,\n} from './ListContact.styled';\n\nexport const ListContact: React.FC = () => {\n  const dispatch = useDispatch();\n  const { item, isRefreshing, filter } = useContacts();\n\n  useEffect(() => {\n    dispatch(contactsOperations.getAllContacts());\n  }, [dispatch]);\n\n  const filteredContacts = item?.filter(\n    (contact: any) =>\n      contact.name && contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <ListContactWrapper>\n      <Title>\n        <span>List Contacts</span>\n        <SpinnerWrapper>{isRefreshing && <SpinnerBig />}</SpinnerWrapper>\n      </Title>\n      <List>\n        {filteredContacts &&\n          filteredContacts.map(\n            ({\n              id,\n              name,\n              number,\n            }: {\n              id: string;\n              name: string;\n              number: string;\n            }) => {\n              return (\n                <ItemContact key={id} id={id} name={name} number={number} />\n              );\n            }\n          )}\n      </List>\n    </ListContactWrapper>\n  );\n};\n","import { Section, Wrapper } from './PhoneBook.style';\nimport { FormContact } from './formContact/FormContact';\nimport { SearchContact } from './searchContact/SearchContact';\nimport { ListContact } from './listContact/ListContact';\n\nconst PhoneBook: React.FC = () => {\n  return (\n    <>\n      <Section>\n        <Wrapper>\n          <FormContact />\n          <SearchContact />\n          <ListContact />\n        </Wrapper>\n      </Section>\n    </>\n  );\n};\nexport default PhoneBook;\n","import PhoneBook from 'components/phonebook/PhoneBook';\n\nconst Contacts = () => {\n  return (\n    <>\n      <PhoneBook />\n    </>\n  );\n};\nexport default Contacts;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["Section","styled","_templateObject","_taggedTemplateLiteral","Wrapper","_templateObject2","Form","WrapperLabelInput","Input","_templateObject3","Button","_templateObject4","FormContact","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","dispatch","useDispatch","item","useContacts","contactNameId","nanoid","contactNumberId","filteredContacts","filter","contact","toLowerCase","includes","onChange","e","_e$currentTarget","currentTarget","value","_jsxs","onSubmit","preventDefault","length","toast","contactsOperations","concat","children","_jsx","htmlFor","type","id","placeholder","pattern","title","required","WrapperSearchContact","InputSearchContact","SearchContact","idSerachContact","_Fragment","setFilter","target","trim","Item","Span","ButtonDel","_templateObject5","ButtonWrapper","_templateObject6","ContactContent","_templateObject7","_ref","console","log","isRefreshing","onClick","disabled","ColorRing","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","ListContactWrapper","Title","SpinnerWrapper","List","ListContact","_useContacts","useEffect","SpinnerBig","map","ItemContact","PhoneBook","size","arguments","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}